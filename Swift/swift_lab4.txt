import Foundationenum LocationType: String{    case restaurant    case pub    case museum    case monument}class Location {    let id: Int    let type: LocationType    let name: String    let rating: Int        init(id: Int, type: LocationType, name: String, rating: Int) {        self.id = id        self.type = type        self.name = name        self.rating = min(max(rating, 1), 5)    }        func printLocation() {        print("{")        print("  Location: \(name)")        print("  Type: \(type.rawValue)")        print("  Rating: \(rating)")        print("  ID: \(id)")        print("}")    }}class City {    var id: Int    var name: String    var description: String    var latitude: Double    var longitude: Double    var tags: [String]    var locations: [Location]    func addLocation(location: Location) {            locations.append(location)    }        init(id: Int, name: String, description: String, latitude: Double, longitude: Double, tags: [String], locations: [Location]? = nil)    {        self.id = id        self.name = name        self.description = description        self.latitude = latitude        self.longitude = longitude        self.tags = tags        self.locations = locations ?? []    }        func printCity()    {        print("City: \(name)")        print("Id: \(id)")        print("Description: \(description)")        print("Coordinates: (\(latitude), \(longitude))")        print("Tags: \(tags)")        for location in locations{        location.printLocation()        }    }}func displayCitiesWith5StarLocations(cities: [City]) -> Void{    for city in cities{        let fiveStars = city.locations.filter { $0.rating == 5 }        print("City: \(city.name)")        print("Five star locations: \(fiveStars.count)")        for location in fiveStars{            location.printLocation()        }        print("------------------------")    }}func display5StarRestaurants(cities: [City]) -> [City]{    var out: [City] = []    for city in cities{        for location in city.locations{            if location.type == .restaurant && location.rating == 5{                out.append(city)                break             }        }    }        return out}func printSortedLocations(city: City) -> Void{    print("\nBest locations from \(city.name)")    for location in city.locations.sorted(by: { $0.rating > $1.rating}){        location.printLocation()    }}func printTwoFarestCities(cities: [City]) -> Void{    var MyCity1: City?    var MyCity2: City?    var distance_max = 0.0    for city1 in cities{        for city2 in cities{            let dist = distance(lat1: city1.latitude, lon1: city1.longitude, lat2: city2.latitude, lon2: city2.longitude)            if dist > distance_max{                MyCity1 = city1                MyCity2 = city2                distance_max = dist            }        }    }        if let c1 = MyCity1, let c2 = MyCity2{        print("Two farest cities (\(String(format: "%.2f", distance_max))km)")        print(c1.name)        print(c2.name)    }    else{        print("No two farest cities!")    }}func printClosestAndFarthestFromPorint(x: Double, y: Double, cities: [City]) -> Void{    var distance_min = 1000000.0    var distance_max = 0.0    var closest: City?    var farest: City?    for city in cities{        let dist = distance(lat1: x, lon1: y, lat2: city.latitude, lon2: city.longitude)        if dist > distance_max{            distance_max = dist            farest = city        }        if dist < distance_min{            distance_min = dist            closest = city        }    }    print("For coordinate [\(x);\(y)]:")    if let closestCity = closest {        print("Closest city (\(String(format: "%.2f", distance_min))km) is (\(closestCity.name))")    }     else {        print("No closest city found.")    }    if let farestCity = farest {        print("Farest city (\(String(format: "%.2f", distance_max))km) is (\(farestCity.name))")    }    else {        print("No farest city found.")    }}func distance(lat1: Double, lon1: Double, lat2: Double, lon2: Double) -> Double{    let lat1 = lat1 * Double.pi / 180.0    let lon1 = lon1 * Double.pi / 180.0    let lat2 = lat2 * Double.pi / 180.0    let lon2 = lon2 * Double.pi / 180.0    let dLat = lat2 - lat1    let dLon = lon2 - lon1    let a = sin(dLat / 2) * sin(dLat / 2) +            cos(lat1) * cos(lat2) *            sin(dLon / 2) * sin(dLon / 2)    let c = 2 * atan2(sqrt(a), sqrt(1 - a))    let distance = 6371.0 * c    return distance}func getCitiesWithSpecificKeyword(cities: [City], keyWord: String) -> [City]{    var out: [City] = []    for city in cities{        for tag in city.tags{            if tag == keyWord{                out.append(city)                break            }        }    }    return out}func getCityByName(cities: [City], cityName: String) -> [City]{    var out: [City] = []    for city in cities{        if cityName == city.name{            out.append(city)        }    }    return out}func printCities(cities: [City]) -> Void{    for city in cities{        city.printCity()    }    print("\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")}var cities: [City] = []cities.append(City(id: 1,                    name: "New York",                    description: "Heart of stock market",                    latitude: 40.71,                    longitude: -74.0,                    tags: ["usa", "manhattan", "skyscrapers"]))cities.append(City(id: 2,                    name: "Los Angeles",                    description: "City of Angels",                    latitude: 34.05,                    longitude: -118.25,                    tags: ["usa", "hollywood", "beach"]))cities.append(City(id: 3,                    name: "Tokyo",                    description: "Vibrant metropolis",                    latitude: 35.68,                    longitude: 139.76,                    tags: ["japan", "tech", "culture"]))cities.append(City(id: 4,                    name: "London",                    description: "Historic capital",                    latitude: 51.51,                    longitude: -0.13,                    tags: ["uk", "history", "culture"]))cities.append(City(id: 5,                    name: "Paris",                    description: "City of love",                    latitude: 48.86,                    longitude: 2.35,                    tags: ["france", "romance", "culture"]))cities.append(City(id: 6,                    name: "Shanghai",                    description: "Global financial center",                    latitude: 31.23,                    longitude: 121.47,                    tags: ["china", "finance", "skyscrapers"]))cities.append(City(id: 7,                    name: "Mumbai",                    description: "Bustling city",                    latitude: 19.07,                    longitude: 72.87,                    tags: ["india", "film", "culture"]))cities.append(City(id: 8,                    name: "SÃ£o Paulo",                    description: "City of contrasts",                    latitude: -23.55,                    longitude: -46.63,                    tags: ["brazil", "culture", "food"]))cities.append(City(id: 9,                    name: "Mexico City",                    description: "Capital of Mexico",                    latitude: 19.43,                    longitude: -99.13,                    tags: ["mexico", "history", "culture"]))cities.append(City(id: 10,                    name: "Moscow",                    description: "Russian capital",                    latitude: 55.75,                    longitude: 37.62,                    tags: ["russia", "history", "culture"]))cities.append(City(id: 11,                    name: "Seoul",                    description: "Dynamic city",                    latitude: 37.57,                    longitude: 126.98,                    tags: ["south korea", "tech", "culture"]))cities.append(City(id: 12,                    name: "Cairo",                    description: "City of a thousand minarets",                    latitude: 30.05,                    longitude: 31.24,                    tags: ["egypt", "history", "culture"]))cities.append(City(id: 13,                    name: "Bangkok",                    description: "City of angels",                    latitude: 13.75,                    longitude: 100.52,                    tags: ["thailand", "culture", "food"]))cities.append(City(id: 14,                    name: "Berlin",                    description: "Vibrant capital",                    latitude: 52.52,                    longitude: 13.41,                    tags: ["germany", "history", "culture"]))cities.append(City(id: 15,                    name: "Istanbul",                    description: "City on two continents",                    latitude: 41.01,                    longitude: 28.95,                    tags: ["turkey", "history", "culture"]))cities.append(City(id: 16,                    name: "Sydney",                    description: "Harbour city",                    latitude: -33.87,                    longitude: 151.21,                    tags: ["australia", "beach", "culture"]))cities.append(City(id: 17,                    name: "Dubai",                    description: "City of gold",                    latitude: 25.27,                    longitude: 55.30,                    tags: ["uae", "finance", "skyscrapers"]))cities.append(City(id: 18,                    name: "Singapore",                    description: "Garden city",                    latitude: 1.35,                    longitude: 103.82,                    tags: ["singapore", "finance", "garden"]))cities.append(City(id: 19,                    name: "Rio de Janeiro",                    description: "Marvelous city",                    latitude: -22.91,                    longitude: -43.18,                    tags: ["brazil", "beach", "culture"]))cities.append(City(id: 20,                    name: "Toronto",                    description: "Multicultural hub",                    latitude: 43.65,                    longitude: -79.38,                    tags: ["canada", "culture", "diversity"]))cities.append(City(id: 21,                    name: "Berlin",                    description: "Multicultural hub",                    latitude: 143.65,                    longitude: -79.38,                    tags: ["canada", "culture", "diversity"]))print("\nCities with name Berlin:\n")var out1 = getCityByName(cities: cities, cityName: "Berlin")printCities(cities: out1)print("\nCities with tag skyscrapers\n")var out2 = getCitiesWithSpecificKeyword(cities: cities, keyWord: "skyscrapers")printCities(cities: out2)print("\nFind distance between [\(cities[1].latitude);\(cities[1].longitude)] and [\(cities[2].latitude);\(cities[2].longitude)]")print(distance(lat1: cities[0].latitude, lon1: cities[0].longitude, lat2: cities[1].latitude, lon2: cities[1].longitude))print("\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n")printClosestAndFarthestFromPorint(x: 42.71, y: -71.0, cities: cities)print("\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n")printTwoFarestCities(cities: cities)// Adding locations to New Yorkcities[0].addLocation(location: Location(id: 1, type: .restaurant, name: "ABC Restaurant", rating: 4))cities[0].addLocation(location: Location(id: 2, type: .pub, name: "XYZ Pub", rating: 3))cities[0].addLocation(location: Location(id: 1, type: .restaurant, name: "EBS Restaurant", rating: 1))cities[0].addLocation(location: Location(id: 2, type: .pub, name: "Speluno Pub", rating: 5))cities[0].addLocation(location: Location(id: 2, type: .restaurant, name: "NAJLEPSZY KEBSIK", rating: 5))// Adding locations to Los Angelescities[1].addLocation(location: Location(id: 3, type: .museum, name: "123 Museum", rating: 5))cities[5].addLocation(location: Location(id: 1, type: .restaurant, name: "XD Restaurant", rating: 5))cities[5].addLocation(location: Location(id: 1, type: .monument, name: "BIG O MONUMENT", rating: 1))cities[8].addLocation(location: Location(id: 2, type: .restaurant, name: "UAMIM Restaurant", rating: 5))//printCities(cities: cities)print("\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")var out3 = display5StarRestaurants(cities: cities)print("\nCities with 5 star restaurants:\n")printCities(cities: out3)printSortedLocations(city: cities[0])print("\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")displayCitiesWith5StarLocations(cities: cities)