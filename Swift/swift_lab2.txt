// Zad 1.1

func minValue (_ a: Int, _ b: Int) -> Int {
	if (a>=b){
      return b
  }
  else{
    return a
  }
}

print(minValue(5,13))
print(minValue(13,5))

// Zad 1.2

func lastDigit (_ a: Int) -> Int {
    return a%10
}

print(lastDigit(5349))

// Zad 1.3

func divides(_ a: Int, _ b: Int) -> Bool{
    if(a%b==0){
      return true;
    }
    else{
      return false;
    }
}

func countDivisors(_ a: Int) -> Int{
  var counter = 0
  for i in 1...a{
    if(divides(a,i) == true){
      counter+=1
    }
  }
  return counter
}

func isPrime(_ a: Int) -> Bool{
    if(countDivisors(a)<=2){
        return true
    }
    else{
        return false
    }
}
print(divides(7, 3)) // false - 7 is not divisible by 3
print(divides(8, 4)) // true - 8 is divisible by 4


print(countDivisors(1)) // 1 - 1
print(countDivisors(10)) // 4 - 1, 2, 5 and 10
print(countDivisors(12)) // 6 - 1, 2, 3, 4, 6 and 12


print(isPrime(3)) // true
print(isPrime(8)) // false
print(isPrime(13)) // true

// Zad 2.1

let printBart = {
    print("I will pass this course with best mark, because Swift is great!")
}
func smartBart(_ a: Int,_ f:()->Void){
    for _ in 1...a{
        printBart()
    }
}

smartBart(10, printBart)

// Zad 2.2

let numbers = [10, 16, 18, 30, 38, 40, 44, 50]

print(numbers.filter{$0 % 4 == 0})

// Zad 2.3

let numbers = [10, 16, 18, 30, 100, 38, 40, 44, 50]

print(numbers.reduce(0){max($0,$1)})

// Zad 2.4

var strings = ["Gdansk", "University", "of", "Technology"]

print(strings.reduce(""){$0 + " " + $1})

// Zad 2.5

let numbers = [1, 2 ,3 ,4, 5, 6]
let tmp1 = numbers.filter{$0 % 2 == 1}
let tmp2 = tmp1.map{$0*$0}
let tmp3 = tmp2.reduce(0){$0+$1}
print(tmp3)

// Zad 3.1

func minmax(_ a: Int, _ b: Int) -> (Int, Int){ // return (min,max) format
    if(a>=b){
        return (b,a)
    }
    else{
        return (a,b)
    }
}

print(minmax(5,5))

print(minmax(17,5))

print(minmax(5,255))

// Zad 3.2

var stringsArray = ["gdansk", "university", "gdansk", "university", "university", "of",  "technology", "technology", "gdansk", "gdansk"]

var countedStrings: [(String,Int)] = []

for i in 0..<stringsArray.count{
    var flag = false
    for j in 0..<countedStrings.count{
        if(countedStrings[j].0==stringsArray[i]){
            countedStrings[j].1+=1
            flag = true
            break
        }
    }
    if(!flag){
        countedStrings.append((stringsArray[i],1))
    }
}

print(countedStrings)

// Zad 4.1

enum Day: Int {
    case Monday = 1
    case Tuesday = 2
    case Wednesday = 3
    case Thursday = 4
    case Friday = 5
    case Saturday = 6
    case Sunday = 7
    
    func emoji() -> String {
        switch self {
        case .Monday:
            return "😢"
        case .Tuesday:
            return "📅"
        case .Wednesday:
            return "🐫"
        case .Thursday:
            return "😎"
        case .Friday:
            return "🎉"
        case .Saturday:
            return "❤️"
        case .Sunday:
            return "☀️"
        }
    }
}

let today = Day.Friday
print("Today is \(today.rawValue) day of week \(today.emoji())")